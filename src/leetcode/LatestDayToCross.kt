package leetcode

import kotlin.math.min

fun main() {
    var testCase: String
//    testCase = "[[1,1],[2,1],[1,2],[2,2]]"
//    testIt(2, 2, testCase, 2)
//
//    testCase = "[1,1],[1,2],[2,1],[2,2]]"
//    testIt(2, 2, testCase, 1)
//
//    testCase = "[[1,2],[2,1],[3,3],[2,2],[1,1],[1,3],[2,3],[3,2],[3,1]]"
//    testIt(3, 3, testCase, 3)
//
//    testCase = "[[2,5],[1,6],[1,1],[2,2],[2,3],[1,5],[2,1],[1,4],[2,6],[2,4],[1,2],[1,3]]"
//    testIt(2, 6, testCase, 7)

//    testCase = "[[17,2],[1,4],[12,2],[23,3],[4,2],[1,2],[21,2],[13,3],[7,4],[3,1],[24,3],[16,1],[19,1],[7,1],[18,1],[6,2],[21,3],[22,2],[15,2],[1,3],[5,2],[4,4],[20,4],[24,4],[20,1],[14,3],[10,3],[23,4],[6,4],[17,3],[20,2],[1,1],[17,4],[18,2],[10,1],[25,1],[11,4],[12,4],[7,2],[3,2],[2,1],[18,3],[14,2],[24,2],[25,2],[7,3],[19,4],[9,3],[16,3],[11,3],[18,4],[5,1],[11,2],[13,2],[14,1],[9,2],[12,3],[21,1],[16,2],[19,2],[24,1],[6,3],[22,4],[15,4],[11,1],[6,1],[13,4],[3,3],[5,4],[22,1],[12,1],[22,3],[9,1],[16,4],[20,3],[8,3],[9,4],[19,3],[2,2],[2,3],[10,4],[3,4],[4,3],[8,2],[2,4],[17,1],[13,1],[4,1],[25,4],[25,3],[23,2],[15,1],[21,4],[14,4],[8,1],[23,1],[8,4],[15,3],[5,3],[10,2]]"
//    testIt(25, 4, testCase, 24)

    testCase = "[[12,6],[3,4],[2,9],[9,4],[9,2],[6,4],[4,4],[8,6],[4,9],[5,6],[7,5],[12,4],[11,8],[3,7],[2,6],[9,8],[3,5],[13,4],[1,3],[10,2],[8,9],[6,6],[11,7],[11,1],[13,9],[12,7],[10,7],[8,2],[1,8],[7,3],[6,5],[2,1],[10,6],[4,8],[4,2],[9,7],[6,2],[3,6],[12,2],[10,3],[10,5],[9,5],[8,8],[8,7],[3,2],[13,6],[3,1],[5,1],[2,7],[8,3],[12,5],[11,2],[6,3],[1,4],[13,3],[4,1],[9,9],[7,7],[4,3],[12,1],[2,2],[7,6],[4,6],[7,9],[7,2],[3,8],[1,6],[11,3],[11,4],[5,9],[13,8],[1,9],[10,1],[9,1],[6,1],[10,9],[12,9],[11,5],[8,1],[13,5],[9,6],[13,2],[6,8],[2,8],[5,3],[3,3],[13,1],[11,9],[9,3],[2,4],[5,2],[8,5],[13,7],[12,8],[5,5],[7,1],[7,4],[2,5],[6,9],[4,7],[5,8],[1,5],[10,8],[8,4],[1,1],[3,9],[1,2],[7,8],[1,7],[6,7],[11,6],[4,5],[5,7],[2,3],[10,4],[5,4],[12,3]]"
    testIt(13, 9, testCase, 35  )
//
//    testCase = "[[26,1],[1,2],[30,2],[10,1],[20,1],[23,3],[9,1],[30,1],[16,1],[2,2],[23,2],[31,3],[21,1],[21,3],[15,3],[28,2],[24,2],[5,1],[33,1],[18,3],[9,2],[16,2],[21,2],[14,3],[19,2],[1,1],[20,2],[2,1],[12,3],[2,3],[25,2],[26,3],[25,3],[13,2],[19,3],[29,1],[4,2],[27,1],[3,2],[17,2],[6,3],[17,3],[31,1],[27,3],[8,2],[24,3],[29,2],[16,3],[12,1],[9,3],[6,2],[10,3],[33,2],[22,3],[22,2],[7,1],[18,1],[32,1],[14,1],[32,2],[1,3],[18,2],[11,3],[12,2],[28,1],[19,1],[24,1],[30,3],[11,2],[4,1],[4,3],[20,3],[8,1],[23,1],[7,3],[27,2],[22,1],[26,2],[15,2],[14,2],[28,3],[13,1],[5,2],[10,2],[6,1],[33,3],[15,1],[13,3],[3,3],[3,1],[31,2],[11,1],[5,3],[8,3],[32,3],[17,1],[7,2],[29,3],[25,1]]"
//    testIt(33, 3, testCase, 11)
}

fun testIt(row: Int, col: Int, test: String, answer: Int) {
    val arr = test.replace("[", "").replace("]","").split(",")
    val testCase = Array(arr.size/2){IntArray(2)}
    var i = 0
    while (i < testCase.size) {
        testCase[i][0] = arr[i*2].toInt()
        testCase[i][1] = arr[i*2+1].toInt()
        i++
    }
    val result = latestDayToCross(row, col, testCase)
    println("${result==answer}: $result")
}

fun latestDayToCross(row: Int, col: Int, cells: Array<IntArray>): Int {
    val a: Array<IntArray> = Array(row) { IntArray(col) }

    var day = 0
    var i = 0
    var rn : Int
    var cn : Int
    while (i < cells.size) {
        rn = cells[i][0] - 1
        cn = cells[i][1] - 1
        a[rn][cn] = 1

        println("DAY: $day")
        for (u in a.indices) {
            for (o in a[u].indices) {
                if (u==rn && o==cn) {
                    print("x ")
                } else {
                    print("${a[u][o]} ")
                }
            }
            println()
        }
        println("====================")

        if (rn > 0 && rn < row - 2) {
            var cn2 = 0
            for (j in 0 until col) {
                if (a[rn-1][j] == 1 || a[rn][j] == 1) {
                    cn2++
                }
            }
            if (cn2 == col) {
                return day
            }
        }

        val rn_from = rn
        val rn_to = if (row < rn+3) row else rn+3
        for (rn2 in rn_from until rn_to) {
            var cnt = 0

            for (j in 0 until col) {
                if (a[rn2][j] == 1) {
                    cnt++
                } else {
                    var x = 0
                    val chap: Boolean = j == 0 || a[rn2][j-1] == 1
                    val tepa: Boolean = rn2 > 0 && a[rn2 - 1][j] == 1
                    val ong: Boolean = j == col - 1 || a[rn2][j+1] == 1
                    val pas: Boolean = rn2 < row-1 && a[rn2 + 1][j] == 1
                    if (chap) x++
                    if (ong) x++
                    if (tepa) x++
                    if (pas) x++
                    if (x == 3  || (tepa && ong && j==0) || (j==col-1 && tepa && chap)) {
                        cnt++
                    }
//                if (chap && ong && tepa && pas) {
//                    cnt++
//                }
                }

                if (cnt == col) {
                    return day
                }
            }
        }


        i++

        day++
    }
    return day
}